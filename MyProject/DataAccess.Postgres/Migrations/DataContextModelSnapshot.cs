// <auto-generated />
using System;
using DataAccess.Postgres;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.Postgres.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Postgres.Entity.ConnectionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ParametersID")
                        .HasColumnType("integer");

                    b.Property<int>("SubsystemID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParametersID");

                    b.HasIndex("SubsystemID");

                    b.ToTable("Connection");
                });

            modelBuilder.Entity("DataAccess.Postgres.Entity.EquipmentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PlantID")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PlantID");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("DataAccess.Postgres.Entity.ParametersEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Measure")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Parameters");
                });

            modelBuilder.Entity("DataAccess.Postgres.Entity.PlantEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Control")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Plant");
                });

            modelBuilder.Entity("DataAccess.Postgres.Entity.SampleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EquipmentID")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentID");

                    b.ToTable("Sample");
                });

            modelBuilder.Entity("DataAccess.Postgres.Entity.SubsystemEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Subsystem");
                });

            modelBuilder.Entity("DataAccess.Postgres.Entity.SystemEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EquipmentID")
                        .HasColumnType("integer");

                    b.Property<int>("SubsystemID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentID");

                    b.HasIndex("SubsystemID");

                    b.ToTable("System");
                });

            modelBuilder.Entity("DataAccess.Postgres.Entity.UnityEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Access")
                        .HasColumnType("text");

                    b.Property<int>("ConnectionID")
                        .HasColumnType("integer");

                    b.Property<string>("Range")
                        .HasColumnType("text");

                    b.Property<int>("SampleID")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConnectionID");

                    b.HasIndex("SampleID");

                    b.ToTable("Unity");
                });

            modelBuilder.Entity("DataAccess.Postgres.Entity.ConnectionEntity", b =>
                {
                    b.HasOne("DataAccess.Postgres.Entity.ParametersEntity", "Parameters")
                        .WithMany("Connection")
                        .HasForeignKey("ParametersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Postgres.Entity.SubsystemEntity", "Subsystem")
                        .WithMany("Connection")
                        .HasForeignKey("SubsystemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parameters");

                    b.Navigation("Subsystem");
                });

            modelBuilder.Entity("DataAccess.Postgres.Entity.EquipmentEntity", b =>
                {
                    b.HasOne("DataAccess.Postgres.Entity.PlantEntity", "Plant")
                        .WithMany("Equipment")
                        .HasForeignKey("PlantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("DataAccess.Postgres.Entity.SampleEntity", b =>
                {
                    b.HasOne("DataAccess.Postgres.Entity.EquipmentEntity", "Equipment")
                        .WithMany("Sample")
                        .HasForeignKey("EquipmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("DataAccess.Postgres.Entity.SystemEntity", b =>
                {
                    b.HasOne("DataAccess.Postgres.Entity.EquipmentEntity", "Equipment")
                        .WithMany("System")
                        .HasForeignKey("EquipmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Postgres.Entity.SubsystemEntity", "Subsystem")
                        .WithMany("System")
                        .HasForeignKey("SubsystemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("Subsystem");
                });

            modelBuilder.Entity("DataAccess.Postgres.Entity.UnityEntity", b =>
                {
                    b.HasOne("DataAccess.Postgres.Entity.ConnectionEntity", "Connection")
                        .WithMany("Unity")
                        .HasForeignKey("ConnectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Postgres.Entity.SampleEntity", "Sample")
                        .WithMany("Unity")
                        .HasForeignKey("SampleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Connection");

                    b.Navigation("Sample");
                });

            modelBuilder.Entity("DataAccess.Postgres.Entity.ConnectionEntity", b =>
                {
                    b.Navigation("Unity");
                });

            modelBuilder.Entity("DataAccess.Postgres.Entity.EquipmentEntity", b =>
                {
                    b.Navigation("Sample");

                    b.Navigation("System");
                });

            modelBuilder.Entity("DataAccess.Postgres.Entity.ParametersEntity", b =>
                {
                    b.Navigation("Connection");
                });

            modelBuilder.Entity("DataAccess.Postgres.Entity.PlantEntity", b =>
                {
                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("DataAccess.Postgres.Entity.SampleEntity", b =>
                {
                    b.Navigation("Unity");
                });

            modelBuilder.Entity("DataAccess.Postgres.Entity.SubsystemEntity", b =>
                {
                    b.Navigation("Connection");

                    b.Navigation("System");
                });
#pragma warning restore 612, 618
        }
    }
}
